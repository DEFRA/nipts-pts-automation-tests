// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace nipts_pts_automation_tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FooterLinks")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("Regression")]
    public partial class FooterLinksFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Regression"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "FooterLinks", "Verify Footer links on Pets", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "FooterLinks.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Footer links and pages on Pets without login")]
        [NUnit.Framework.TestCaseAttribute("test", "Hysbysiad preifatrwydd", "Hysbysiad Preifatrwydd Monitro Trafodiadau", "Hysbysiad Preifatrwydd CThEF", "Cwcis", "sut i reoli cwcis (yn agor tab newydd)", "Datganiad hygyrchedd ar gyfer Porth y Llywodraeth", "datganiad hygyrchedd", "Canllawiau Hygyrchedd Cynnwys y We, fersiwn 2.1", "Telerau ac amodau", "hysbysiad preifatrwydd", "polisi cwcis", null)]
        public async global::System.Threading.Tasks.Task VerifyFooterLinksAndPagesOnPetsWithoutLogin(string logininfo, string privacyPageTitle, string privacyLink1, string privacyLink2, string cookiesPageTitle, string cookiesLink1, string accessibilityPageTitle, string accessibilityLink1, string accessibilityLink2, string tCsPageTitle, string tCsLink1, string tCsLink2, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("logininfo", logininfo);
            argumentsOfScenario.Add("Privacy page title", privacyPageTitle);
            argumentsOfScenario.Add("Privacy Link 1", privacyLink1);
            argumentsOfScenario.Add("Privacy Link 2", privacyLink2);
            argumentsOfScenario.Add("Cookies page Title", cookiesPageTitle);
            argumentsOfScenario.Add("Cookies Link 1", cookiesLink1);
            argumentsOfScenario.Add("Accessibility page title", accessibilityPageTitle);
            argumentsOfScenario.Add("Accessibility Link 1", accessibilityLink1);
            argumentsOfScenario.Add("Accessibility Link 2", accessibilityLink2);
            argumentsOfScenario.Add("TCs page title", tCsPageTitle);
            argumentsOfScenario.Add("TCs Link 1", tCsLink1);
            argumentsOfScenario.Add("TCs Link 2", tCsLink2);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Footer links and pages on Pets without login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("that I navigate to the Pets application portal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync("click on Welsh language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.WhenAsync("click privacy link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync("switch to next opened tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", privacyPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", privacyLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", privacyLink2), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync("Close Current tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync("switch to previous tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.WhenAsync("click cookies link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.AndAsync("switch to next opened tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", cookiesPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", cookiesLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.AndAsync("Close Current tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync("switch to previous tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.WhenAsync("click accessibility link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.AndAsync("switch to next opened tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", accessibilityPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", accessibilityLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", accessibilityLink2), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("Close Current tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("switch to previous tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.WhenAsync("click TCs link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
 await testRunner.AndAsync("switch to next opened tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", tCsPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
 await testRunner.ThenAsync(string.Format("verify the link in Footer page details \'{0}\'", tCsLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
 await testRunner.ThenAsync(string.Format("verify the link in Footer page details \'{0}\'", tCsLink2), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Footer links and pages on Pets")]
        [NUnit.Framework.TestCaseAttribute("test", "Pet travel scheme privacy notice", "data.protection@defra.gov.uk", "www.legislation.gov.uk", "Cwcis", "r Comisiynydd Gwybodaeth (yn agor mewn tab newydd)", "Taking a dog, cat or ferret from Great Britain to Northern Ireland", "AbilityNet (opens in new tab)", "contact the Equality Advisory and Support Service (EASS)", "Telerau ac amodau Cynllun Teithio Anifeiliaid Anwes Gogledd Iwerddon", "Fframwaith Windsor (yn agor mewn tab newydd)", "Darllenwch ragor am symudiadau masnachol", null)]
        public async global::System.Threading.Tasks.Task VerifyFooterLinksAndPagesOnPets(string logininfo, string privacyPageTitle, string privacyLink1, string privacyLink2, string cookiesPageTitle, string cookiesLink1, string accessibilityPageTitle, string accessibilityLink1, string accessibilityLink2, string tCsPageTitle, string tCsLink1, string tCsLink2, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("logininfo", logininfo);
            argumentsOfScenario.Add("Privacy page title", privacyPageTitle);
            argumentsOfScenario.Add("Privacy Link 1", privacyLink1);
            argumentsOfScenario.Add("Privacy Link 2", privacyLink2);
            argumentsOfScenario.Add("Cookies page Title", cookiesPageTitle);
            argumentsOfScenario.Add("Cookies Link 1", cookiesLink1);
            argumentsOfScenario.Add("Accessibility page title", accessibilityPageTitle);
            argumentsOfScenario.Add("Accessibility Link 1", accessibilityLink1);
            argumentsOfScenario.Add("Accessibility Link 2", accessibilityLink2);
            argumentsOfScenario.Add("TCs page title", tCsPageTitle);
            argumentsOfScenario.Add("TCs Link 1", tCsLink1);
            argumentsOfScenario.Add("TCs Link 2", tCsLink2);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Footer links and pages on Pets", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
 await testRunner.GivenAsync("that I navigate to the Pets application portal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
 await testRunner.WhenAsync(string.Format("sign in with valid credentials with logininfo \'{0}\'", logininfo), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.WhenAsync("click on Welsh language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
 await testRunner.WhenAsync("click privacy link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
 await testRunner.AndAsync("switch to next opened tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", privacyPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", privacyLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", privacyLink2), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
 await testRunner.AndAsync("Close Current tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
 await testRunner.AndAsync("switch to previous tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
 await testRunner.WhenAsync("click cookies link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", cookiesPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", cookiesLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.AndAsync("click on back", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.WhenAsync("click accessibility link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", accessibilityPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", accessibilityLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
 await testRunner.AndAsync(string.Format("verify the link in Footer page details \'{0}\'", accessibilityLink2), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
 await testRunner.AndAsync("click on back", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
 await testRunner.WhenAsync("click TCs link on footer page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
 await testRunner.ThenAsync(string.Format("verify the page title in Footer page \'{0}\'", tCsPageTitle), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 62
 await testRunner.ThenAsync(string.Format("verify the link in Footer page details \'{0}\'", tCsLink1), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
 await testRunner.ThenAsync(string.Format("verify the link in Footer page details \'{0}\'", tCsLink2), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify text and Logo on the footer of Sign up page")]
        [NUnit.Framework.TestCaseAttribute("test", "Lifelong pet travel documents", "All content is available under the", "Open Government Licence v3.0", "Crown copyright", null)]
        public async global::System.Threading.Tasks.Task VerifyTextAndLogoOnTheFooterOfSignUpPage(string logininfo, string nextPage, string footerText, string footerPageLink, string footerLogoLink, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("logininfo", logininfo);
            argumentsOfScenario.Add("nextPage", nextPage);
            argumentsOfScenario.Add("FooterText", footerText);
            argumentsOfScenario.Add("FooterPageLink", footerPageLink);
            argumentsOfScenario.Add("FooterLogoLink", footerLogoLink);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify text and Logo on the footer of Sign up page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 72
 await testRunner.GivenAsync("that I navigate to the Pets application portal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 73
 await testRunner.WhenAsync(string.Format("sign in with valid credentials with logininfo \'{0}\'", logininfo), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
 await testRunner.ThenAsync(string.Format("verify next page \'{0}\' is loaded", nextPage), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 75
 await testRunner.ThenAsync(string.Format("verify text \'{0}\' on the page footer", footerText), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
 await testRunner.ThenAsync(string.Format("verify the link in Footer page details \'{0}\'", footerPageLink), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 77
 await testRunner.ThenAsync(string.Format("verify the link in Footer page details \'{0}\'", footerLogoLink), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Welsh updated dashboard on home page")]
        [NUnit.Framework.TestCaseAttribute("Enw�r anifail anwes", "Statws", "test", null)]
        public async global::System.Threading.Tasks.Task VerifyWelshUpdatedDashboardOnHomePage(string petname, string status, string logininfo, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Petname", petname);
            argumentsOfScenario.Add("Status", status);
            argumentsOfScenario.Add("logininfo", logininfo);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Welsh updated dashboard on home page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 85
 await testRunner.GivenAsync("that I navigate to the Pets application portal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 86
 await testRunner.WhenAsync(string.Format("sign in with valid credentials with logininfo \'{0}\'", logininfo), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
 await testRunner.WhenAsync("click on Welsh language", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
 await testRunner.ThenAsync(string.Format("I verify PTD table heading \'{0}\' on homepage", petname), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 89
 await testRunner.ThenAsync(string.Format("I verify PTD table heading \'{0}\' on homepage", status), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
